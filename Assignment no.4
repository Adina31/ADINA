{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Asad\n",
      "Yousuf\n",
      "Karachi\n",
      "{'First_Name': 'Asad', 'Last_Name': 'Yousuf', 'City': 'Karachi', 'Lowest_Qualification': 'Matric'}\n",
      "{'First_Name': 'Asad', 'Last_Name': 'Yousuf', 'City': 'Karachi', 'Lowest_Qualification': 'Matric', 'Middle_Qualification': 'Intermediate'}\n",
      "{'First_Name': 'Asad', 'Last_Name': 'Yousuf', 'City': 'Karachi', 'Lowest_Qualification': 'Matric', 'Middle_Qualification': 'Intermediate', 'Highest_Qualification': \"Bachelor's of Commerce\"}\n",
      "{'First_Name': 'Asad', 'Last_Name': 'Yousuf', 'City': 'Karachi'}\n"
     ]
    }
   ],
   "source": [
    "Person={\n",
    "    \"First_Name\":\"Asad\",\n",
    "    \"Last_Name\":\"Yousuf\",\n",
    "    \"City\":\"Karachi\"    \n",
    "}\n",
    "print(Person[\"First_Name\"])\n",
    "print(Person[\"Last_Name\"])\n",
    "print(Person[\"City\"])\n",
    "Person[\"Lowest_Qualification\"]=\"Matric\"\n",
    "print(Person)\n",
    "Person[\"Middle_Qualification\"]=\"Intermediate\"\n",
    "print(Person)\n",
    "Person[\"Highest_Qualification\"]=\"Bachelor's of Commerce\"\n",
    "print(Person)\n",
    "del Person[\"Lowest_Qualification\"]\n",
    "del Person[\"Middle_Qualification\"]\n",
    "del Person[\"Highest_Qualification\"]\n",
    "print(Person)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Country': 'Pakistan', 'Population': '14.91_million', 'Fact': \"The country's main port\"}\n",
      "{'Country': 'China', 'Population': '21.54_million', 'Fact': \"Center of the nation's politics and international exchanges\"}\n",
      "{'Country': 'Turkey', 'Population': '15.07_million', 'Fact': ' Only city in the world which is both in Europe and Asia geographically'}\n"
     ]
    }
   ],
   "source": [
    "Cities={\n",
    "    \"Karachi\":{\n",
    "        \n",
    "        \"Country\":\"Pakistan\",\n",
    "        \"Population\":\"14.91_million\",\n",
    "        \"Fact\":\"The country's main port\"\n",
    "        },\n",
    "    \"Beijing\":{\n",
    "        \n",
    "        \"Country\":\"China\",\n",
    "        \"Population\":\"21.54_million\",\n",
    "        \"Fact\":\"Center of the nation's politics and international exchanges\"\n",
    "        \n",
    "        \n",
    "    },\n",
    "    \"Istanbul\":{\n",
    "        \n",
    "        \"Country\":\"Turkey\",\n",
    "        \"Population\":\"15.07_million\",\n",
    "        \"Fact\":\" Only city in the world which is both in Europe and Asia geographically\"\n",
    "    }\n",
    "}\n",
    "print(Cities[\"Karachi\"])\n",
    "print(Cities[\"Beijing\"])\n",
    "print(Cities[\"Istanbul\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What is your age?24\n",
      "The ticket is $15\n"
     ]
    }
   ],
   "source": [
    "Age=int(input(\"What is your age?\"))\n",
    "if Age<=3:\n",
    "    print(\"Ticket is free\")\n",
    "elif Age>=3 and Age<=12:\n",
    "    print(\"The ticket is $10\")\n",
    "else:\n",
    "    print(\"The ticket is $15\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "One of my favourite book is Namal\n"
     ]
    }
   ],
   "source": [
    "def Favourite_book(One_Par,Title):\n",
    "    One_Par=\"One of my favourite book is\"\n",
    "    Message=One_Par+\" \"+Title\n",
    "    print(Message)\n",
    "Favourite_book(\"One_Par\",\"Namal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "print(random.randint(1,30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Hints=[\n",
    "    {\"S.no\":1,\n",
    "     \"Hint\":\"The no. is even\",\n",
    "     \"Opt\":[\"3\",\"4\",\"5\",\"8\"],\n",
    "     \"Ans\":\"8\"\n",
    "    },\n",
    "    {\"S.no\":2,\n",
    "     \"Hint\":\"The no. is greater than 7\",\n",
    "     \"Opt\":[\"3\",\"8\",\"9\",\"10\"],\n",
    "     \"Ans\":\"8\"\n",
    "    \n",
    "    },\n",
    "    {\"S.no\":3,\n",
    "     \"Hint\":\"The no. is smaller than 10\",\n",
    "     \"Opt\":[\"7\",\"8\",\"9\",\"10\"],\n",
    "     \"Ans\":\"8\"\n",
    "    }\n",
    "]\n",
    "for Hint in Hints:\n",
    "    data=str(Hint[\"S.no\"])+\":\"+Hint[\"Hint\"]+\"\\n Write your answer in input\"+Hint[\"Opt\"][0]+Hint[\"Opt\"][1]+Hint[\"Opt\"][2]+Hint[\"Opt\"][3]\n",
    "Ans=input(data)\n",
    "if Ans==Hint[\"Ans\"]:\n",
    "    print(\"Your answer is correct\")\n",
    "else:\n",
    "    print(\"Your answer is incorrect\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
